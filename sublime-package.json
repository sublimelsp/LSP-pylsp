{
  "contributions": {
    "settings": [
      {
        "file_patterns": [
          "/LSP-pylsp.sublime-settings"
        ],
        "schema": {
          "$id": "sublime://settings/LSP-pylsp",
          "definitions": {
            "PluginConfig": {
              "properties": {
                "settings": {
                  "properties": {
                    "pylsp.executable": {
                      "type": "string",
                      "default": "pylsp",
                      "description": "Language server executable"
                    },
                    "pylsp.configurationSources": {
                      "type": "array",
                      "default": [
                        "pycodestyle"
                      ],
                      "description": "List of configuration sources to use.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "pycodestyle",
                          "flake8"
                        ]
                      },
                      "uniqueItems": true
                    },
                    "pylsp.plugins.autopep8.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.flake8.enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.flake8.exclude": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "Exclude files or directories which match these patterns."
                    },
                    "pylsp.plugins.flake8.filename": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "When parsing directories, only check filenames matching these patterns."
                    },
                    "pylsp.plugins.flake8.hangClosing": {
                      "type": [
                        "boolean",
                        "null"
                      ],
                      "default": null,
                      "description": "Hang closing bracket instead of matching indentation of opening bracket's line."
                    },
                    "pylsp.plugins.flake8.ignore": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "List of errors and warnings to ignore (or skip)."
                    },
                    "pylsp.plugins.flake8.maxComplexity": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "default": null,
                      "description": "Maximum allowed complexity threshold."
                    },
                    "pylsp.plugins.flake8.maxLineLength": {
                      "type": [
                        "number",
                        "null"
                      ],
                      "default": null,
                      "description": "Set maximum allowed line length."
                    },
                    "pylsp.plugins.flake8.select": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "Select errors and warnings."
                    },
                    "pylsp.plugins.flake8.perFileIgnores": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "markdownDescription": "Ignore errors and warnings per file.\n\nEach individual item should be in a format `file_path:error_code`. For example `\"project/__init__.py:W305,W304\"`."
                    },
                    "pylsp.plugins.flake8.config": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "default": null,
                      "description": "Path to the config file that will be the authoritative config source."
                    },
                    "pylsp.plugins.flake8.executable": {
                      "type": "string",
                      "default": "flake8",
                      "description": "Path to the flake8 executable."
                    },
                    "pylsp.plugins.jedi.auto_import_modules": {
                      "type": "array",
                      "default": ["numpy"],
                      "items": {
                        "type": "string"
                      },
                      "description": "List of module names for jedi.settings.auto_import_modules."
                    },
                    "pylsp.plugins.jedi.extra_paths": {
                      "description": "Additional paths to extend the JEDI engine with.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "pylsp.plugins.jedi.env_vars": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "default": null,
                      "minProperties": 1,
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Define environment variables for jedi.Script and Jedi.names."
                    },
                    "pylsp.plugins.jedi.environment": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "default": null,
                      "description": "Define environment for jedi.Script and Jedi.names."
                    },
                    "pylsp.plugins.jedi_completion.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.jedi_completion.include_params": {
                      "type": "boolean",
                      "default": true,
                      "description": "Auto-completes methods and classes with tabstops for each parameter."
                    },
                    "pylsp.plugins.jedi_completion.include_class_objects": {
                      "type": "boolean",
                      "default": false,
                      "description": "Adds class objects as a separate completion item."
                    },
                    "pylsp.plugins.jedi_completion.include_function_objects": {
                      "type": "boolean",
                      "default": false,
                      "description": "Adds function objects as a separate completion item."
                    },
                    "pylsp.plugins.jedi_completion.fuzzy": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable fuzzy when requesting autocomplete."
                    },
                    "pylsp.plugins.jedi_completion.eager": {
                      "type": "boolean",
                      "default": false,
                      "description": "Resolve documentation and detail eagerly."
                    },
                    "pylsp.plugins.jedi_completion.resolve_at_most": {
                      "type": "integer",
                      "default": 25,
                      "description": "How many labels and snippets (at most) should be resolved?"
                    },
                    "pylsp.plugins.jedi_completion.cache_for": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": [
                        "pandas",
                        "numpy",
                        "tensorflow",
                        "matplotlib"
                      ],
                      "description": "Modules for which labels and snippets should be cached."
                    },
                    "pylsp.plugins.jedi_definition.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.jedi_definition.follow_imports": {
                      "type": "boolean",
                      "default": true,
                      "description": "The goto call will follow imports."
                    },
                    "pylsp.plugins.jedi_definition.follow_builtin_imports": {
                      "type": "boolean",
                      "default": true,
                      "description": "If follow_imports is True will decide if it follow builtin imports."
                    },
                    "pylsp.plugins.jedi_definition.follow_builtin_definitions": {
                      "type": "boolean",
                      "default": true,
                      "description": "Follow builtin and extension definitions to stubs."
                    },
                    "pylsp.plugins.jedi_hover.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.jedi_references.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.jedi_signature_help.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.jedi_symbols.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.jedi_symbols.all_scopes": {
                      "type": "boolean",
                      "default": true,
                      "description": "If True lists the names of all scopes instead of only the module namespace."
                    },
                    "pylsp.plugins.jedi_symbols.include_import_symbols": {
                      "type": "boolean",
                      "default": true,
                      "description": "If True includes symbols imported from other libraries."
                    },
                    "pylsp.plugins.mccabe.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.mccabe.threshold": {
                      "type": "integer",
                      "default": 15,
                      "description": "The minimum threshold that triggers warnings about cyclomatic complexity."
                    },
                    "pylsp.plugins.preload.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.preload.modules": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "List of modules to import on startup"
                    },
                    "pylsp.plugins.pycodestyle.enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.pycodestyle.exclude": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "Exclude files or directories which match these patterns."
                    },
                    "pylsp.plugins.pycodestyle.filename": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "When parsing directories, only check filenames matching these patterns."
                    },
                    "pylsp.plugins.pycodestyle.select": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "Select errors and warnings."
                    },
                    "pylsp.plugins.pycodestyle.ignore": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "defaultSnippets": [
                        {
                          "body": ["E501"]
                        }
                      ],
                      "uniqueItems": true,
                      "description": "Ignore errors and warnings."
                    },
                    "pylsp.plugins.pycodestyle.hangClosing": {
                      "type": [
                        "boolean",
                        "null"
                      ],
                      "default": null,
                      "description": "Hang closing bracket instead of matching indentation of opening bracket's line."
                    },
                    "pylsp.plugins.pycodestyle.maxLineLength": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "default": null,
                      "description": "Set maximum allowed line length."
                    },
                    "pylsp.plugins.pycodestyle.aggressive": {
                      "type": [
                        "number",
                        "null"
                      ],
                      "default": null,
                      "markdownDescription": "Enable non-whitespace auto-fixes. Higher number results in more aggressive changes. For example, `E712` requires aggressiveness level 2 (since `x == True` could be changed to either `x` or `x is True`, but `autopep8` chooses the former). will also shorten lines more aggressively. Will also shorten the lines and remove trailing whitespace more aggressively."
                    },
                    "pylsp.plugins.pydocstyle.enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.pydocstyle.convention": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "default": null,
                      "enum": [
                        "pep257",
                        "numpy",
                        "google",
                        null
                      ],
                      "description": "Choose the basic list of checked errors by specifying an existing convention."
                    },
                    "pylsp.plugins.pydocstyle.addIgnore": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "Ignore errors and warnings in addition to the specified convention."
                    },
                    "pylsp.plugins.pydocstyle.addSelect": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "Select errors and warnings in addition to the specified convention."
                    },
                    "pylsp.plugins.pydocstyle.ignore": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "Ignore errors and warnings."
                    },
                    "pylsp.plugins.pydocstyle.select": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "Select errors and warnings."
                    },
                    "pylsp.plugins.pydocstyle.match": {
                      "type": "string",
                      "default": "(?!test_).*\\.py",
                      "description": "Check only files that exactly match the given regular expression; default is to match files that don't start with 'test_' but end with '.py'."
                    },
                    "pylsp.plugins.pydocstyle.matchDir": {
                      "type": "string",
                      "default": "[^\\.].*",
                      "description": "Search only dirs that exactly match the given regular expression; default is to match dirs which do not begin with a dot."
                    },
                    "pylsp.plugins.pyflakes.enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.pylint.enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.pylint.args": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": false,
                      "description": "Arguments to pass to pylint."
                    },
                    "pylsp.plugins.pylint.executable": {
                      "type": "string",
                      "description": "Executable to run pylint with. Setting this will run pylint on unsaved files via stdin. Can slow down workflow. Only works with python3."
                    },
                    "pylsp.plugins.rope_autoimport.enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable autoimport."
                    },
                    "pylsp.plugins.rope_autoimport.memory": {
                      "type": "boolean",
                      "default": false,
                      "description": "Make the autoimport database memory only. Drastically increases startup time."
                    },
                    "pylsp.plugins.pylsp_black.enabled": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable or disable the plugin.\n\nEnabling `black` disables the `autopep8` and `yapf` plugins."
                    },
                    "pylsp.plugins.pylsp_black.cache_config": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable black configuration caching.\n\nImproves performance of the plugin. When configuration caching is enabled, any changes to black's configuration will need the LSP server to be restarted."
                    },
                    "pylsp.plugins.pylsp_black.line_length": {
                      "type": "integer",
                      "default": 88,
                      "markdownDescription": "Maps to [black's max-line-length](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length) setting."
                    },
                    "pylsp.plugins.pylsp_black.preview": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Enable or disable [black's --preview setting](https://black.readthedocs.io/en/stable/the_black_code_style/future_style.html#preview-style)."
                    },
                    "pylsp.plugins.pyls_isort.enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.pylsp_mypy.enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.pylsp_mypy.dmypy": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Execute via `dmypy run` rather than `mypy`. This uses the `dmypy` daemon and may dramatically improve the responsiveness of the `pylsp` server, however this currently does not work in `live_mode`. Enabling this disables `live_mode`, even for conflicting configs."
                    },
                    "pylsp.plugins.pylsp_mypy.dmypy_status_file": {
                      "type": "string",
                      "default": ".dmypy.json",
                      "markdownDescription": "Specifies which status file dmypy should use. This modifies the `--status-file` option passed to `dmypy` given `pylsp.plugins.pylsp_mypy.dmypy` is enabled."
                    },
                    "pylsp.plugins.pylsp_mypy.live_mode": {
                      "type": "boolean",
                      "default": true,
                      "markdownDescription": "Provide type checking as you type. This writes to a tempfile every time a check is done. Turning off `live_mode` means you must save your changes for mypy diagnostics to update correctly."
                    },
                    "pylsp.plugins.pylsp_mypy.strict": {
                      "type": "boolean",
                      "default": false,
                      "markdownDescription": "Refers to the `strict` option of `mypy`. This option often is too strict to be useful."
                    },
                    "pylsp.plugins.pylsp_mypy.overrides": {
                      "type": "array",
                      "items": {
                        "type": ["boolean", "string"]
                      },
                      "default": [true],
                      "markdownDescription": "Specifies a list of alternate or supplemental command-line options.\n\nThis modifies the options passed to `mypy` or the mypy-specific ones passed to `dmypy run`. When present, the special boolean member `true` is replaced with the command-line options that would've been passed had `overrides` not been specified. Later options take precedence, which allows for replacing or negating individual default options (see `mypy --help | grep inverse`)."
                    },
                    "pylsp.plugins.pylsp_mypy.config_sub_paths": {
                      "type": "array",
                      "items": {
                        "type": ["string"]
                      },
                      "default": [],
                      "markdownDescription": "Specifies sub paths under which the mypy configuration file may be found. For each directory searched for the mypy config file, this also searches the sub paths specified here."
                    },
                    "pylsp.plugins.pylsp_mypy.report_progress": {
                      "type": "boolean",
                      "default": false,
                      "description": "Report basic progress to the LSP client.\n\nWith this option, pylsp-mypy will report when mypy is running, given your editor supports LSP progress reporting. For small files this might produce annoying flashing in your editor, especially in with `pylsp.plugins.pylsp_mypy.live_mode`. For large projects, enabling this can be helpful to assure yourself whether mypy is still running."
                    },
                    "pylsp.plugins.rope_completion.enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.plugins.rope_completion.eager": {
                      "type": "boolean",
                      "default": false,
                      "description": "Resolve documentation and detail eagerly."
                    },
                    "pylsp.plugins.yapf.enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable or disable the plugin."
                    },
                    "pylsp.rope.extensionModules": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "default": null,
                      "description": "Builtin and c-extension modules that are allowed to be imported and inspected by rope."
                    },
                    "pylsp.rope.ropeFolder": {
                      "type": [
                        "array",
                        "null"
                      ],
                      "default": null,
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true,
                      "description": "The name of the folder in which rope stores project configurations and data.  Pass `null` for not using such a folder at all."
                    }
                  },
                  "additionalProperties": false
                },
              },
            },
          },
          "allOf": [
            {
              "$ref": "sublime://settings/LSP-plugin-base"
            },
            {
              "$ref": "sublime://settings/LSP-pylsp#/definitions/PluginConfig"
            }
          ],
        }
      },
      {
        "file_patterns": [
          "/*.sublime-project"
        ],
        "schema": {
          "properties": {
            "settings": {
              "properties": {
                "LSP": {
                  "properties": {
                    "LSP-pylsp": {
                      "$ref": "sublime://settings/LSP-pylsp#/definitions/PluginConfig"
                    }
                  }
                }
              }
            }
          }
        }
      },
    ]
  }
}
